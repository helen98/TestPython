#!/usr/bin/env python3

import nltk
import html
import os
import sys

from analyzer import Analyzer
from termcolor import colored
from twython import Twython
from twython import TwythonAuthError, TwythonError, TwythonRateLimitError


def main():

    # ensure proper usage
    if len(sys.argv) != 2:
        sys.exit("Usage: ./smile name_of_user")

    # absolute paths to lists
    positives = os.path.join(sys.path[0], "positive-words.txt")
    negatives = os.path.join(sys.path[0], "negative-words.txt")

    # get user's most recent 50 tweets
    tweet = get_user_timeline(sys.argv[1])

    # instantiate analyzer
    analyzer = Analyzer(positives, negatives)

    # if get user's tweets is unsuccessful
    if tweet == None:
        sys.exit
    else:
        # analyze tweets
        for line in tweet:
            # separate tweets
            if not line.startswith(","):
                tweet_new = line
                tokenizer = nltk.tokenize.TweetTokenizer()
                tokens = tokenizer.tokenize(tweet_new)
                score = 0;
                for line in tokens:
                    # calculate the sentiment for entire tweet
                    score = score + analyzer.analyze(line)
                if score > 0.0:
                    print(colored(" {} ".format(score), "green"), end="")
                    print(colored(tweet_new, "green"), end="")
                elif score < 0.0:
                    print(colored("{} ".format(score), "red"), end="")
                    print(colored(tweet_new, "red"), end="")
                else:
                    print(colored(" {} ".format(score), "yellow"), end="")
                    print(colored(tweet_new, "yellow"), end="")
                print()


def get_user_timeline(screen_name, count=50):
    """Return list of most recent tweets posted by screen_name."""

    # ensure count is valid
    if count < 1 or count > 50:
        raise RuntimeError("invalid count")

    # ensure environment variables are set
    if not os.environ.get("API_KEY"):
        raise RuntimeError("API_KEY not set")
    if not os.environ.get("API_SECRET"):
        raise RuntimeError("API_SECRET not set")

    # get screen_name's (or @screen_name's) most recent tweets
    # https://dev.twitter.com/rest/reference/get/users/lookup
    # https://dev.twitter.com/rest/reference/get/statuses/user_timeline
    # https://github.com/ryanmcgrath/twython/blob/master/twython/endpoints.py
    try:
        twitter = Twython(os.environ.get("API_KEY"), os.environ.get("API_SECRET"))
        user = twitter.lookup_user(screen_name=screen_name.lstrip("@"))
        if user[0]["protected"]:
            return None
        tweets = twitter.get_user_timeline(screen_name=screen_name, count=count)
        return [html.unescape(tweet["text"].replace("\n", " ")) for tweet in tweets]
    except TwythonAuthError:
        raise RuntimeError("invalid API_KEY and/or API_SECRET") from None
    except TwythonRateLimitError:
        raise RuntimeError("you've hit a rate limit") from None
    except TwythonError:
        return None


if __name__ == "__main__":
    main()